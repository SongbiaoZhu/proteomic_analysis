rm(list = ls())
options(stringsAsFactors = F)
source("udf.R")
creDir("data")
creDir("res")
creDir("public")
dataDir = file.path(getwd(),'data')
resDir = file.path(getwd(),'res')
publicDir = file.path(getwd(),'public')
rm(list = ls())
options(stringsAsFactors = F)
source("udf.R")
creDir("data")
creDir("res")
creDir("public")
dataDir = file.path(getwd(),'data')
resDir = file.path(getwd(),'res')
publicDir = file.path(getwd(),'public')
install.packages('mstherm')
library(mstherm)
control <- system.file("extdata", "demo_project/control.tsv", package="mstherm")
annots <- system.file("extdata", "demo_project/annots.tsv", package="mstherm")
expt <- MSThermExperiment(control, annotations=annots)
expt <- normalize_to_std(expt, "cRAP_ALBU_BOVIN", plot=FALSE)
res <- model_experiment(expt, bootstrap=FALSE, np=2)
# plot single MSThermResult
plot(res$P38707)
# plot all proteins (e.g. to pdf device, one-per-page)
plot(res)
# plot single MSThermResult
plot(res$P38707)
View(expt)
control
annots
View(expt)
str(expt)
model_protein()
model_protein
df <- as.data.frame(res)
df
View(df)
help(system.file)
control <- system.file("extdata", "demo_project/control.tsv", package="mstherm")
annots <- system.file("extdata", "demo_project/annots.tsv", package="mstherm")
expt <- normalize_to_std(expt, "cRAP_ALBU_BOVIN", plot=FALSE)
res <- model_experiment(expt, bootstrap=FALSE, np=2)
# plot single MSThermResult
plot(res$P38707)
# plot single MSThermResult
plot(res$P38707)
model_experiment
model_protein
rm(list = ls())
# msthermTest
rm(list = ls())
options(stringsAsFactors = F)
source("udf.R")
creDir("data")
creDir("res")
creDir("public")
dataDir = file.path(getwd(),'data')
resDir = file.path(getwd(),'res')
publicDir = file.path(getwd(),'public')
load(file = file.path(resDir,'output_step1.RData'))
colnames(dat)
# msthermTest
rm(list = ls())
# msthermTest
rm(list = ls())
options(stringsAsFactors = F)
source("udf.R")
creDir("data")
creDir("res")
creDir("public")
dataDir = file.path(getwd(),'data')
resDir = file.path(getwd(),'res')
publicDir = file.path(getwd(),'public')
load(file = file.path(resDir,'output_step1.RData'))
# wide to long data
colnames(dat)
# wide to long data
# Accession | Description | Unique.Peptides | Score | Concentration | Temp...
dfname <- paste0('df',concRange)
dfname
grep(concRange[1],colnames(dat))
help("grep")
df <- dat[,c(1:4,grep(concRange[1],colnames(dat),fixed = TRUE))]
grep(concRange[1],colnames(dat),fixed = TRUE)
grep(paste(concRange[1],'$',sep="", collapse="|"),colnames(dat),fixed = TRUE)
grep(paste(concRange[1],'$',sep=""),colnames(dat),fixed = TRUE)
paste(concRange[1],'$',sep="")
grep(paste(concRange[1],'$',sep=""),colnames(dat),fixed = F)
df <- dat[,c(1:4,grep(paste(concRange[1],'$',sep=""),colnames(dat),fixed = F))]
colnames(df)
df$col.conc <- rep(concRange[i],nrow(df))
i = 1
df <- dat[,c(1:4,grep(paste(concRange[i],'$',sep=""),colnames(dat),fixed = F))]
df$col.conc <- rep(concRange[i],nrow(df))
names(df)[names(df) == "col.conc"] <- concRange[i]
colnames(df)
library(stringr)
str_split(colnames(df),'_',1)
str_split(colnames(df),'\_',1)
str_split('Temp67_Conc0','_')
str_split(colnames(df),'\_')
str_split(colnames(df),'_')
unlist(str_split(colnames(df),'_'))
lapply(str_split(colnames(df),'_'), function(x)x[1][1])
unlist(lapply(str_split(colnames(df),'_'), function(x)x[1][1]))
unlist(lapply(str_split(colnames(df),'_'), '[[',1))
colnames(df) <- unlist(lapply(str_split(colnames(df),'_'), '[[',1))
seq(length(concRange))
# wide to long data
# Accession | Description | Unique.Peptides | Score | Conc | Temp1...10
dflist <- list()
i = 1
for (i in seq(length(concRange))) {
df <- dat[,c(1:4,grep(paste(concRange[i],'$',sep=""),colnames(dat),fixed = F))]
df$col.conc <- rep(concRange[i],nrow(df))
names(df)[names(df) == "col.conc"] <- concRange[i]
colnames(df) <- unlist(lapply(str_split(colnames(df),'_'), '[[',1))
dflist[i] <- df
}
names(dflist) <- paste0('df',concRange)
str(dflist)
# wide to long data
# Accession | Description | Unique.Peptides | Score | Conc | Temp1...10
dflist <- list()
i = 1
for (i in seq(length(concRange))) {
df <- dat[,c(1:4,grep(paste(concRange[i],'$',sep=""),colnames(dat),fixed = F))]
df$col.conc <- rep(concRange[i],nrow(df))
names(df)[names(df) == "col.conc"] <- concRange[i]
colnames(df) <- unlist(lapply(str_split(colnames(df),'_'), '[[',1))
dflist[[i]] <- df
}
names(dflist) <- paste0('df',concRange)
str(dflist)
# msthermTest
rm(list = ls())
options(stringsAsFactors = F)
source("udf.R")
creDir("data")
creDir("res")
creDir("public")
dataDir = file.path(getwd(),'data')
resDir = file.path(getwd(),'res')
publicDir = file.path(getwd(),'public')
load(file = file.path(resDir,'output_step1.RData'))
library(stringr)
# wide to long data
# Accession | Description | Unique.Peptides | Score | Conc | Temp37...67
datlist <- list()
i = 1
for (i in seq(length(concRange))) {
df <- dat[,c(1:4,grep(paste(concRange[i],'$',sep=""),colnames(dat),fixed = F))]
df$col.conc <- rep(concRange[i],nrow(df))
names(df)[names(df) == "col.conc"] <- concRange[i]
colnames(df) <- unlist(lapply(str_split(colnames(df),'_'), '[[',1))
datlist[[i]] <- df
}
names(datlist) <- paste0('df',concRange)
class(datlist[1])
class(datlist[[1]])
j = 1
help(ggplot)
datlist[[j]][1,6:15]
datlist[[j]][1,5:14]
datProtein <- datlist[[j]][k,c(1,5:14)]
k = 1
datProtein <- datlist[[j]][k,c(1,5:14)]
datProtein
library(plyr)
library(dplyr)
help(gather)
library(tidyr)
help(gather)
gather(datProtein,key = 'Temp',value = 'relRatio',-Accession)
datProtein <- datlist[[j]][k,c(1,5:14)]
datProtein <- gather(datProtein,key = 'Temp',value = 'relRatio',-Accession)
datProtein$Temp <- substring(datProtein$Temp,5)
datProtein
ggplot(data = datProtein,aes(x = Temp,y = relRatio)) +
geom_line()+
geom_point()
library(ggplot2)
ggplot(data = datProtein,aes(x = Temp,y = relRatio)) +
geom_line()+
geom_point()
ggplot(data = datProtein,aes(x = Temp,y = relRatio, group=1)) +
geom_line()+
geom_point()
ggplot(data = datProtein,aes(x = Temp,y = relRatio, group=1)) +
geom_line()+
geom_point()+
theme_bw()
help(ggtile)
ggplot(data = datProtein,aes(x = Temp,y = relRatio, group=1)) +
geom_line() +
geom_point() +
theme_bw() +
labs(title = datProtein$Accession[1])
colnames(datlist[[1]])
# msthermTest
rm(list = ls())
rm(list = ls())
options(stringsAsFactors = F)
source("udf.R")
creDir("data")
creDir("res")
creDir("public")
dataDir = file.path(getwd(),'data')
resDir = file.path(getwd(),'res')
publicDir = file.path(getwd(),'public')
library(mstherm)
model_experiment
control <- system.file("extdata", "demo_project/control.tsv", package="mstherm")
annots <- system.file("extdata", "demo_project/annots.tsv", package="mstherm")
expt <- MSThermExperiment(control, annotations=annots)
View(expt)
View(expt[["annot"]])
model_protein
st.coarse <- expand.grid(p=c(0,0.3),k=seq(0,4000,by=1000),m=seq(30,60,by=15))
st.fine   <- expand.grid(p=c(0,0.3),k=seq(0,8000,by=200),m=seq(30,80,by=10))
st.coarse
st.fine
# The model
sigmoid <- function(p,k,m,x) {
(1-p)/(1+exp(-k*(1/x-1/m)))+p
}
load(file = file.path(resDir,'output_step2.RData'))
head(df)
load(file = file.path(resDir,'output_step1.RData'))
temps <- as.numeric(substring(tempRange,5))
ratios <- df[1,5:14]
help(which.max)
ratios
ratios <- c(df[1,5:14])
ratios <- unname(unlist(df[1,5:14]))
fit <- list()
fit <- list()
st.coarse <- expand.grid(p=c(0,0.3),k=seq(0,4000,by=1000),m=seq(30,60,by=15))
st.fine   <- expand.grid(p=c(0,0.3),k=seq(0,8000,by=200),m=seq(30,80,by=10))
x <- temps
y <- ratios
for (st in list(st.coarse,st.fine)) {
tryCatch( {
mod <- nls2(y~sigmoid(p,k,m,x),data=list(x=x,y=y),start=st,algorithm="brute-force",control=nls.control(warnOnly=T,maxiter=5000))
fit <-
nls2(y~sigmoid(p,k,m,x),data=list(x=x,y=y),start=mod,control=nls.control(warnOnly=F),algorithm="port",lower=c(0,1,10),upper=c(0.4,100000,100))
obj <- list()
obj$plat  <- as.numeric(coefficients(fit)[1])
obj$k     <- as.numeric(coefficients(fit)[2])
obj$tm    <- as.numeric(coefficients(fit)[3])
obj$slope <- as.numeric(sigmoid.d1(obj$plat,obj$k,obj$tm,obj$tm))
y.fit <- sigmoid(obj$plat,obj$k,obj$tm,temps)
obj$y.fit <- y.fit
obj$resid <- ratios - y.fit
obj$r2 <- 1-(sum(obj$resid^2)/(length(ratios)*var(ratios)))
obj$rmsd <- sqrt( sum(obj$resid^2)/length(ratios) )
return(obj)
},error = function(e) {})
}
error
st = st.coarse
mod <- nls2(y~sigmoid(p,k,m,x),data=list(x=x,y=y),start=st,algorithm="brute-force",control=nls.control(warnOnly=T,maxiter=5000))
install.packages('nls2')
install.packages("nls2")
library(nls2)
mod <- nls2(y~sigmoid(p,k,m,x),data=list(x=x,y=y),start=st,algorithm="brute-force",control=nls.control(warnOnly=T,maxiter=5000))
fit <-
nls2(y~sigmoid(p,k,m,x),data=list(x=x,y=y),start=mod,control=nls.control(warnOnly=F),algorithm="port",lower=c(0,1,10),upper=c(0.4,100000,100))
obj <- list()
obj$plat  <- as.numeric(coefficients(fit)[1])
obj$k     <- as.numeric(coefficients(fit)[2])
obj$tm    <- as.numeric(coefficients(fit)[3])
obj$slope <- as.numeric(sigmoid.d1(obj$plat,obj$k,obj$tm,obj$tm))
# first derivative
sigmoid.d1 <- function(p,k,m,x) {
-((1 - p) * (exp(-k * (1/x - 1/m)) * (k * (1/x^2)))/(1 + exp(-k * (1/x - 1/m)))^2)
}
obj$slope <- as.numeric(sigmoid.d1(obj$plat,obj$k,obj$tm,obj$tm))
y.fit <- sigmoid(obj$plat,obj$k,obj$tm,temps)
obj$y.fit <- y.fit
obj$resid <- ratios - y.fit
obj$r2 <- 1-(sum(obj$resid^2)/(length(ratios)*var(ratios)))
obj$rmsd <- sqrt( sum(obj$resid^2)/length(ratios) )
x <- temps
y <- ratios
fit <- list()
st.coarse <- expand.grid(p=c(0,0.3),k=seq(0,4000,by=1000),m=seq(30,60,by=15))
st.fine   <- expand.grid(p=c(0,0.3),k=seq(0,8000,by=200),m=seq(30,80,by=10))
for (st in list(st.coarse,st.fine)) {
tryCatch( {
mod <- nls2(y~sigmoid(p,k,m,x),data=list(x=x,y=y),start=st,algorithm="brute-force",control=nls.control(warnOnly=T,maxiter=5000))
fit <-
nls2(y~sigmoid(p,k,m,x),data=list(x=x,y=y),start=mod,control=nls.control(warnOnly=F),algorithm="port",lower=c(0,1,10),upper=c(0.4,100000,100))
obj <- list()
obj$plat  <- as.numeric(coefficients(fit)[1])
obj$k     <- as.numeric(coefficients(fit)[2])
obj$tm    <- as.numeric(coefficients(fit)[3])
obj$slope <- as.numeric(sigmoid.d1(obj$plat,obj$k,obj$tm,obj$tm))
y.fit <- sigmoid(obj$plat,obj$k,obj$tm,temps)
obj$y.fit <- y.fit
obj$resid <- ratios - y.fit
obj$r2 <- 1-(sum(obj$resid^2)/(length(ratios)*var(ratios)))
obj$rmsd <- sqrt( sum(obj$resid^2)/length(ratios) )
return(obj)
},error = function(e) {})
}
str(obj)
curve(sigmoid(series$plat, series$k, series$tm, x))
curve(sigmoid(obj$plat, obj$k, obj$tm, x))
curve(sigmoid(obj$plat, obj$k, obj$tm, seq(37,67,0.1)))
y.fit
sigmoid(obj$plat,obj$k,obj$tm,temps)
sigmoid(obj$plat,obj$k,obj$tm,seq(37,67,1))
curve(sigmoid(obj$plat,obj$k,obj$tm,seq(37,67,1)))
plot(seq(37,67,1),sigmoid(obj$plat,obj$k,obj$tm,seq(37,67,1)))
plot(seq(37,67,0.1),sigmoid(obj$plat,obj$k,obj$tm,seq(37,67,0.1)))
plot(seq(37,67,0.01),sigmoid(obj$plat,obj$k,obj$tm,seq(37,67,0.01)))
obj$slope
obj$tm
coefficients(fit)
fit
rm(list = ls())
load(file = file.path(resDir,'output_step1.RData'))
load(file = file.path(resDir,'output_step2.RData'))
rm(list = ls())
options(stringsAsFactors = F)
source("udf.R")
creDir("data")
creDir("res")
creDir("public")
dataDir = file.path(getwd(),'data')
resDir = file.path(getwd(),'res')
publicDir = file.path(getwd(),'public')
library(mstherm)
control <- system.file("extdata", "demo_project/control.tsv", package="mstherm")
annots <- system.file("extdata", "demo_project/annots.tsv", package="mstherm")
expt <- MSThermExperiment(control, annotations=annots)
expt <- normalize_to_std(expt, "cRAP_ALBU_BOVIN", plot=FALSE)
res <- model_experiment(expt, bootstrap=FALSE, np=2)
# plot single MSThermResult
plot(res$P38707)
# plot all proteins (e.g. to pdf device, one-per-page)
plot(res)
load(file = file.path(resDir,'output_step1.RData'))
load(file = file.path(resDir,'output_step2.RData'))
temps <- as.numeric(substring(tempRange,5))
ratios <- unname(unlist(df[1,5:14]))
x <- temps
y <- ratios
fit <- list()
st.coarse <- expand.grid(p=c(0,0.3),k=seq(0,4000,by=1000),m=seq(30,60,by=15))
st.fine   <- expand.grid(p=c(0,0.3),k=seq(0,8000,by=200),m=seq(30,80,by=10))
for (st in list(st.coarse,st.fine)) {
tryCatch( {
mod <- nls2(y~sigmoid(p,k,m,x),data=list(x=x,y=y),start=st,algorithm="brute-force",control=nls.control(warnOnly=T,maxiter=5000))
fit <-
nls2(y~sigmoid(p,k,m,x),data=list(x=x,y=y),start=mod,control=nls.control(warnOnly=F),algorithm="port",lower=c(0,1,10),upper=c(0.4,100000,100))
obj <- list()
obj$plat  <- as.numeric(coefficients(fit)[1])
obj$k     <- as.numeric(coefficients(fit)[2])
obj$tm    <- as.numeric(coefficients(fit)[3])
obj$slope <- as.numeric(sigmoid.d1(obj$plat,obj$k,obj$tm,obj$tm))
y.fit <- sigmoid(obj$plat,obj$k,obj$tm,temps)
obj$y.fit <- y.fit
obj$resid <- ratios - y.fit
obj$r2 <- 1-(sum(obj$resid^2)/(length(ratios)*var(ratios)))
obj$rmsd <- sqrt( sum(obj$resid^2)/length(ratios) )
return(obj)
},error = function(e) {})
}
# plot single MSThermResult
plot(res$P38707)
rm(list = ls())
options(stringsAsFactors = F)
